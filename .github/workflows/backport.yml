name: Backport changes to maintenance branches

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  get-labels:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.get-labels.outputs.branches }}
    steps:
      - name: Determine branches to cherry-pick to
        id: get-labels
        run: |
          set -e
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }})
          LABELS_JSON=$(echo "$RESPONSE" | jq .labels[])

          if [[ $? -ne 0 ]]; then
            echo "Failed to fetch labels from GitHub API."
            exit 1
          fi

          BACKPORT_LABELS=$(echo "$LABELS_JSON" | jq -r 'if type == "object" then [.] else . end | map(select(.name | startswith("backport to")))[] | .name')

          BRANCHES=""
          if [[ $BACKPORT_LABELS == "backport to all versions" ]]; then
            BRANCHES="v/23.1,v/22.3,v/22.2"
          else
            VERSIONS=$(echo "$BACKPORT_LABELS" | grep -o 'v/[0-9]\+\.[0-9]\+')
            BRANCHES="${BRANCHES:+$BRANCHES,}$VERSIONS"
          fi

          # Convert BRANCHES into a valid JSON array
          BRANCHES_ARRAY=$(echo "[\"$(echo $BRANCHES | sed 's/,/","/g')\"]")
          echo "branches=$BRANCHES_ARRAY" >> $GITHUB_OUTPUT

  backport:
    needs: get-labels
    if: needs.get-labels.outputs.branches != ''
    strategy:
      matrix:
        branch: ${{fromJson(needs.get-labels.outputs.branches)}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up git config
        run: |
          echo "Setting up git config..."
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Checkout maintenance branch and cherry-pick
        run: |
          echo "Fetching latest changes..."
          git fetch
          # Check if branch exists
          if ! git ls-remote --heads origin ${{ matrix.branch }}; then
              echo "Branch ${{ matrix.branch }} does not exist. Skipping."
              exit 0
          fi

          echo "Checking out branch: ${{ matrix.branch }}..."
          git checkout ${{ matrix.branch }} || (echo "Failed to checkout branch: ${{ matrix.branch }}." && exit 1)

          echo "Cherry-picking changes..."

          # Attempt cherry-pick and capture any errors
          if ! git cherry-pick -x $GITHUB_SHA; then
            echo "Cherry-pick had conflicts for branch ${{ matrix.branch }}. Creating GitHub issue for manual intervention."

            # Create a GitHub issue
            issue_title="Manual cherry-pick required for ${{ matrix.branch }}"
            issue_body="Failed to automatically cherry-pick commit $GITHUB_SHA to branch ${{ matrix.branch }}. Manual intervention is required. To manually apply the cherry-pick:\
            \n\`\`\`bash\
            \n git fetch origin\
            \n git checkout ${{ matrix.branch }}\
            \n git pull origin ${{ matrix.branch }}\
            \n git cherry-pick $GITHUB_SHA\
            \n # Resolve any merge conflicts here, then commit the changes\
            \n git push origin ${{ matrix.branch }}\
            \n\`\`\`"


            response=$(curl -sS -w "%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues \
              -d "{ \"title\": \"$issue_title\", \"body\": \"$issue_body\" }")

            status_code=$(echo "$response" | tail -n 1)

            if [[ $status_code -lt 200 || $status_code -gt 299 ]]; then
              echo "Failed to create GitHub issue. HTTP status code: $status_code"
              echo "$response"
              exit 1
            fi

            git cherry-pick --abort || echo "Failed to abort cherry-pick. Manual intervention might be needed."
          else
            echo "Pushing changes to branch: ${{ matrix.branch }}..."
            git push
          fi